1+2
sqrt(1/4)/(1/2+2/pi^2)
1+2
3+4
4+5
a
a=rep(c(0),times=81)
dim(a)=c(9,9)
for(i in 1:9){ for(j in 1:9){a[i,j]=i*j} }
a
a=rep(c(0),times=81)
dim(a)=c(9,9)
for(i in 1:9){ for(j in 1:9){a[i,j]=i*j} }
a
b=rep(c(0),times=81)
dim(a)=c(9,9)
b=rep(c(0),times=81)
dim(b)=c(9,9)
for(i in 1:9){ for(j in 1:9){b[i,j]=i*j} }
b
b
ls()
search()
searchpaths()
ls()
ls()
rm(i)
i=1
i
rm(i)
i
library()
install.packages("rcmdr")
install.packages("Rcmdr")
library("cluster", lib.loc="D:/R-3.3.2/library")
library("cluster")
1+2
library("rcmdr")
library("Rcmdr")
install.packages("Rcmdr")
install.packages("Rcmdr")
library("Rcmdr", lib.loc="D:/R-3.3.2/library")
library("rcmdr")
library("Rcmdr")
memory.size()
memory.limit()
gc()
memory.size()
memory.limit()
gc()
emample(plot)
example(plot)
data()
iris
?iris
str(iris)
view(iris)
View(iris)
head(iris)
head(iris,10)
tail(iris,10)
mean(iris$Sepal.Length)
mean(iris$Sepal.width)
mean(iris$Sepal.width)
mean(iris$Sepal.Width)
round(mean(iris$Petal.Length))
attach(iris)
round(mean(Petal.Length))
summary(iris)
plot(Sepal.Length,Sepal.Width)
plot(Sepal.Length,Sepal.Width)
x=seq(0,5,by=0.1)
y=sin(x)
plot(x,y)
x<-seq(0,5,0.1)
y<-sin(x)
plot(x,y)
x<-seq(0,5,by=0.1)
y<-sin(x)
plot(x,y)
x=seq(0,5,by=0.1)
y=sin(x)
plot(x,y)
plot(x,y,main="我的第一個R圖",xlab="x軸",ylab="y軸",col=c("red","blue","black"),lwd=3,pch=17)
plot(Sepal.Length,Sepal.Width)
plot(x,y,main="我的第一個R圖",xlab="x軸",ylab="y軸",col=c("red","blue","black"),lwd=3,pch=17)
a=seq(0,5,by=0.1)
b=sin(a)
plot_dt=cbind(a,b)
plot(plot_dt)
gnp=ts(cumsum(1+round(rnorm(100),2)),start=c(2016,7),frequency=12)
gnp
plot.ts(gnp)
plot(iris)
Petal.Width
stem(Petal.Width,scale=0.1)
x=rep(TRUE,5)
x
x[1]=2
x
x[1]="a"
x
x[1]='abc'
x
x=c(2,"two",TRUE)
x
x=x[-c(2)]
x
x=seq(11,78,by=7)
x
sort=1
sort
rm(sort)
sort
x=c(4,2,3,5,6,7,8,9,2,3,4,556,566,34,1,13)
names(x)=paste('Column',1:length(x),sep='_')
x
x[x==1]
which(x==1)
unique(x)
length(x)
sort(x)
speed=c('slow','fast','veryfast','middle')
speed
speedfactor=factor(speed)
speed
speedfactor[1]
speedfactor[1]>speedfactor[2]
speedfactor1=factor(speedfactor,order=TRUE,levels=c('slow','middle','fast','verfast'))
speedfactor1
speedfactor1=factor(speedfactor,order=TRUE,levels=c('slow','middle','fast','veyrfast'))
speedfactor1
speedfactor1=factor(speedfactor,order=TRUE,levels=c('slow','middle','fast','veryfast'))
speedfactor1
speedfactor1[1]>speedfactor1[2]
class(speed)
class(speedfactor)
class(speedfactor1)
ARPB=c(2356,3455656,33556,7677,43,55,6767,554,335,6789,78,332,45625,34,546,645,2311,1234)
ARPB_band=cut(ARPB,breaks=-1,250,500,1000,1500,5000,10000)
ARPB_band=cut(ARPB,breaks=c(-1,250,500,1000,1500,5000,10000))
ARPB_band
ARPB_band=cut(ARPB,breaks=c(-1,250,500,1000,1500,5000,10000,10000+))
ARPB_band=cut(ARPB,breaks=c(-1,250,500,1000,1500,5000,10000,1000000))
ARPB_band
ARPB_band=cut(ARPB,breaks=c(-1,250,500,1000,1500,5000,10000,100000000))
ARPB_band
class(ARPB_band)
pie(table(ARPB_band))
lenght(ARPB_band)
length(ARPB_band)
ARPB=c(250,3455656,33556,7677,43,55,6767,554,335,6789,78,332,45625,34,546,645,2311,1234)
ARPB_band=cut(ARPB,breaks=c(-1,250,500,1000,1500,5000,10000,100000000))
ARPB_band
pie(table(ARPB_band))
table(ARPB)
table(ARPB_band)
x=matrix(1:12,nrow=3,ncol=4)
x
y=matrix(1:12,nrow=3,ncol=4,byrow=TRUE)
y
x[2][3]
x[2,3]
t(x)
x[3:4,2:3]
y[3:4,2:3]
x
x[2:3,3:4]
dimnames(x)=list(c('row1','row2','row3'),c('col1','col2','col3','col4',))
dimnames(x)=list(c('row1','row2','row3'),c('col1','col2','col3','col4'))
x
dimname(x)=list(paste('R',1:nrow(x),sep='_'),paste('C',1:ncol(x),sep='_'))
dimnames(x)=list(paste('R',1:nrow(x),sep='_'),paste('C',1:ncol(x),sep='_'))
x
x=matrix(1:9,nrow=3,ncol=3,byrow=T)
x
y=matrix(10:8,nrow=3,ncol=3,byrow=T)
y
y=matrix(10:18,nrow=3,ncol=3,byrow=T)
y
cbind(x,y)
rbin(x,y)
rbine(x,y)
rbind(x,y)
xy=rbind(x,y)
xy
dimnames(xy)=list(paste('Row',1:nrow(xy),sep='_'),paste('Column',1:ncol(xy),sep='_'))
xy
q()
1+3
1+3=
library('methods')
library('gridExtra')
list.of.packages <- c('RCurl','rjson','bitops','methods','gridExtra')
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library('RCurl')
library('rjson')
library('bitops')
library('methods')
library('gridExtra')
`dataset` = read.csv('C:/Users/Tommy_Lee/REditorWrapper_e4ea46ec-fa0b-43dd-982c-3d5ca70c2fbd/input_df_f9e2d742-03a7-4752-bfbc-88a5f26fc6c7.csv', check.names = FALSE, encoding = "UTF-8", blank.lines.skip = FALSE);
print(fromJSON(result))
print(fromJSON(Result))
Result = h$value()
grid.table(result, theme = mytheme)
result = fromJSON(h$value())$Result$output1[[1]]$Predicted
result = fromJSON(h$value())$Results$output1[[1]]$Result
if(result=="1"){
result="Survived"
} else if(result == "0"){
result="Deceased"
}
print(headers)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
print(fromJSON(result))
const string apiKey = "4bvPaLeMyrKmXKPSOZXRjDlLYrgqqmMPvlagO/YUCI4lV90lSTPODPdHdEoYsk6aUX/wGQO6FbHR5xzurcKT8Q=="; // Replace this with the API key for the web service
api_key = "4bvPaLeMyrKmXKPSOZXRjDlLYrgqqmMPvlagO/YUCI4lV90lSTPODPdHdEoYsk6aUX/wGQO6FbHR5xzurcKT8Q==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/40fb174ec1f04b4f81848aa7609a417f/services/d1153956e3ea4163bc1b8fb8f53adc9a/execute?api-version=2.0&format=swagger",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
head(mtcars)
install.packages("corrplot")
library(corrplot)
print("hello world")
cars
plot(cars)
setwd("C:/Users/tommy_Lee/Desktop/python/2 -Data_Preprocessing")
dataset = read.csv('Data.csv')
View(dataset)
